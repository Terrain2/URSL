// __binary__ and __branching__ are internal unstable syntax!
//
// __binary__ is used to declare three overloads of:
//
// &a <b> -> &a
// <a> &b -> &b
// <a> <b> -> &out
//
// __branching__ does the same but provides a branch <a> <b> -> :dest overload as well
//
// honestly i'll probably keep this for a while, but please do not use it as it is purely
// intended for my own use in this file to reduce repetitive code lol.

inst nop [] -> []
inst pop [a] -> []
inst dup [a] -> [a a]
inst swap [a b] -> [b a]
inst over [a b] -> [a b a]

inst load &a -> &a { LOD &a &a }
inst store <out> <src> { STR <out> <src> }
inst copy <out> <src> { CPY <out> <src> }

inst bool &a -> &a { SETNZ &a &a }
inst not &a -> &a { NOT &a &a }

branch bool <src> -> :dest { BNZ :dest <src> }
// this is comparing to @MAX because it's bitwise NOT, and not logical NOT
// for logical NOT, that would be `bool not`, which *is* equivalent for the trivial 0 or @MAX case
branch not <src> -> :dest { BNE :dest <src> @MAX }

__binary__ xor -> XOR;
__binary__ xnor -> XNOR;

__binary__ and -> AND;
__binary__ nand -> NAND;

__binary__ or -> OR;
__binary__ nor -> NOR;

__binary__ add -> ADD;
__binary__ sub -> SUB;

inst inc &a -> &a { INC &a &a }
inst dec &a -> &a { DEC &a &a }
inst neg &a -> &a { NEG &a &a }

__binary__ mult -> MLT;
__binary__ div -> DIV;
__binary__ sdiv -> SDIV;
__binary__ mod -> MOD;
__binary__ smod -> SMOD;

inst rsh &a -> &a { RSH &a &a }
inst ash &a -> &a { SRS &a &a }
inst lsh &a -> &a { LSH &a &a }

__binary__ brsh -> BSR;
__binary__ bash -> BSS;
__binary__ blsh -> BSL;

__branching__ carry -> SETC + BRC;

__branching__ eq -> SETE + BRE;
__branching__ ne -> SETNE + BNE;

__branching__ gt -> SETG + BRG;
__branching__ gte -> SETGE + BGE;
__branching__ lt -> SETL + BRL;
__branching__ lte -> SETLE + BLE;

__branching__ sgt -> SSETG + SBRG;
__branching__ sgte -> SSETGE + SBGE;
__branching__ slt -> SSETL + SBRL;
__branching__ slte -> SSETLE + SBLE;